name: Deploy docs

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout repo
        uses: actions/checkout@v2
      - name: 🚧 Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
          source-url: https://nuget.pkg.github.com/Paramdigma/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: ⚙️ Install dependencies
        run: dotnet restore
      - name: 🏗 Build
        run: dotnet build --configuration Release --no-restore
      - name: 🧪 Test
        run: dotnet test --no-restore --verbosity normal
      - name: 🗜 Compress build files # This would actually build your project, using zip for an example artifact
        run: zip --junk-paths Paramdigma.Core-${{github.ref}}.zip src/bin/Release/netstandard2.1/*

      - name: 📘 Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: 📜 Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./Paramdigma.Core-${{github.ref}}.zip
          asset_name: Paramdigma.Core-${{github.ref}}.zip
          asset_content_type: application/zip
      - name: 📦 Create the package
        run: dotnet pack --configuration Release src/Paramdigma.Core.csproj
      - name: 🚀 Publish the package to GPR
        run: dotnet nuget push src/bin/Release/*.nupkg

  deploy_docs:
    runs-on: ubuntu-latest
    name: Docs build & deploy
    needs: build_and_publish
    steps:
      - uses: actions/checkout@v2
        name: 🛎 Checkout
      - run: "rm .gitignore && ls ."
        name: 🗑 Remove .gitignore file
      - uses: nikeee/docfx-action@master
        name: 📚 Build Docs
        with:
          args: docfx_project/docfx.json
      - name: 🚀 Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: docs/ # The folder the action should deploy.
 